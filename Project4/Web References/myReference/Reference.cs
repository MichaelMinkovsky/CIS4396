//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Project4.myReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RealtyWSSoap", Namespace="http://tempuri.org/")]
    public partial class RealtyWS : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback findMatchingHomesOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateHomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addHomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteHomeOperationCompleted;
        
        private System.Threading.SendOrPostCallback findHomeByCityStateBudgetOperationCompleted;
        
        private System.Threading.SendOrPostCallback findHomeByBudgetSizeTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback displayAppointmentsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RealtyWS() {
            this.Url = global::Project4.Properties.Settings.Default.Project4_myReferences_RealtyWS;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event findMatchingHomesCompletedEventHandler findMatchingHomesCompleted;
        
        /// <remarks/>
        public event updateHomeCompletedEventHandler updateHomeCompleted;
        
        /// <remarks/>
        public event addHomeCompletedEventHandler addHomeCompleted;
        
        /// <remarks/>
        public event deleteHomeCompletedEventHandler deleteHomeCompleted;
        
        /// <remarks/>
        public event findHomeByCityStateBudgetCompletedEventHandler findHomeByCityStateBudgetCompleted;
        
        /// <remarks/>
        public event findHomeByBudgetSizeTypeCompletedEventHandler findHomeByBudgetSizeTypeCompleted;
        
        /// <remarks/>
        public event addRequestCompletedEventHandler addRequestCompleted;
        
        /// <remarks/>
        public event displayAppointmentsCompletedEventHandler displayAppointmentsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/findMatchingHomes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet findMatchingHomes(int ID) {
            object[] results = this.Invoke("findMatchingHomes", new object[] {
                        ID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void findMatchingHomesAsync(int ID) {
            this.findMatchingHomesAsync(ID, null);
        }
        
        /// <remarks/>
        public void findMatchingHomesAsync(int ID, object userState) {
            if ((this.findMatchingHomesOperationCompleted == null)) {
                this.findMatchingHomesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindMatchingHomesOperationCompleted);
            }
            this.InvokeAsync("findMatchingHomes", new object[] {
                        ID}, this.findMatchingHomesOperationCompleted, userState);
        }
        
        private void OnfindMatchingHomesOperationCompleted(object arg) {
            if ((this.findMatchingHomesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findMatchingHomesCompleted(this, new findMatchingHomesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/updateHome", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateHome(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id) {
            this.Invoke("updateHome", new object[] {
                        address,
                        city,
                        state,
                        listingPrice,
                        squareFootage,
                        availability,
                        numBedrooms,
                        numBathrooms,
                        homeType,
                        Id});
        }
        
        /// <remarks/>
        public void updateHomeAsync(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id) {
            this.updateHomeAsync(address, city, state, listingPrice, squareFootage, availability, numBedrooms, numBathrooms, homeType, Id, null);
        }
        
        /// <remarks/>
        public void updateHomeAsync(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id, object userState) {
            if ((this.updateHomeOperationCompleted == null)) {
                this.updateHomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateHomeOperationCompleted);
            }
            this.InvokeAsync("updateHome", new object[] {
                        address,
                        city,
                        state,
                        listingPrice,
                        squareFootage,
                        availability,
                        numBedrooms,
                        numBathrooms,
                        homeType,
                        Id}, this.updateHomeOperationCompleted, userState);
        }
        
        private void OnupdateHomeOperationCompleted(object arg) {
            if ((this.updateHomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateHomeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addHome", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addHome(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id) {
            this.Invoke("addHome", new object[] {
                        address,
                        city,
                        state,
                        listingPrice,
                        squareFootage,
                        availability,
                        numBedrooms,
                        numBathrooms,
                        homeType,
                        Id});
        }
        
        /// <remarks/>
        public void addHomeAsync(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id) {
            this.addHomeAsync(address, city, state, listingPrice, squareFootage, availability, numBedrooms, numBathrooms, homeType, Id, null);
        }
        
        /// <remarks/>
        public void addHomeAsync(string address, string city, string state, float listingPrice, int squareFootage, string availability, int numBedrooms, int numBathrooms, string homeType, int Id, object userState) {
            if ((this.addHomeOperationCompleted == null)) {
                this.addHomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddHomeOperationCompleted);
            }
            this.InvokeAsync("addHome", new object[] {
                        address,
                        city,
                        state,
                        listingPrice,
                        squareFootage,
                        availability,
                        numBedrooms,
                        numBathrooms,
                        homeType,
                        Id}, this.addHomeOperationCompleted, userState);
        }
        
        private void OnaddHomeOperationCompleted(object arg) {
            if ((this.addHomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addHomeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/deleteHome", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteHome(int Id) {
            this.Invoke("deleteHome", new object[] {
                        Id});
        }
        
        /// <remarks/>
        public void deleteHomeAsync(int Id) {
            this.deleteHomeAsync(Id, null);
        }
        
        /// <remarks/>
        public void deleteHomeAsync(int Id, object userState) {
            if ((this.deleteHomeOperationCompleted == null)) {
                this.deleteHomeOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteHomeOperationCompleted);
            }
            this.InvokeAsync("deleteHome", new object[] {
                        Id}, this.deleteHomeOperationCompleted, userState);
        }
        
        private void OndeleteHomeOperationCompleted(object arg) {
            if ((this.deleteHomeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteHomeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/findHomeByCityStateBudget", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet findHomeByCityStateBudget(string city, string state, float budget, int realtorID) {
            object[] results = this.Invoke("findHomeByCityStateBudget", new object[] {
                        city,
                        state,
                        budget,
                        realtorID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void findHomeByCityStateBudgetAsync(string city, string state, float budget, int realtorID) {
            this.findHomeByCityStateBudgetAsync(city, state, budget, realtorID, null);
        }
        
        /// <remarks/>
        public void findHomeByCityStateBudgetAsync(string city, string state, float budget, int realtorID, object userState) {
            if ((this.findHomeByCityStateBudgetOperationCompleted == null)) {
                this.findHomeByCityStateBudgetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindHomeByCityStateBudgetOperationCompleted);
            }
            this.InvokeAsync("findHomeByCityStateBudget", new object[] {
                        city,
                        state,
                        budget,
                        realtorID}, this.findHomeByCityStateBudgetOperationCompleted, userState);
        }
        
        private void OnfindHomeByCityStateBudgetOperationCompleted(object arg) {
            if ((this.findHomeByCityStateBudgetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findHomeByCityStateBudgetCompleted(this, new findHomeByCityStateBudgetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/findHomeByBudgetSizeType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet findHomeByBudgetSizeType(float budget, int size, string homeType, int realtorID) {
            object[] results = this.Invoke("findHomeByBudgetSizeType", new object[] {
                        budget,
                        size,
                        homeType,
                        realtorID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void findHomeByBudgetSizeTypeAsync(float budget, int size, string homeType, int realtorID) {
            this.findHomeByBudgetSizeTypeAsync(budget, size, homeType, realtorID, null);
        }
        
        /// <remarks/>
        public void findHomeByBudgetSizeTypeAsync(float budget, int size, string homeType, int realtorID, object userState) {
            if ((this.findHomeByBudgetSizeTypeOperationCompleted == null)) {
                this.findHomeByBudgetSizeTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindHomeByBudgetSizeTypeOperationCompleted);
            }
            this.InvokeAsync("findHomeByBudgetSizeType", new object[] {
                        budget,
                        size,
                        homeType,
                        realtorID}, this.findHomeByBudgetSizeTypeOperationCompleted, userState);
        }
        
        private void OnfindHomeByBudgetSizeTypeOperationCompleted(object arg) {
            if ((this.findHomeByBudgetSizeTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findHomeByBudgetSizeTypeCompleted(this, new findHomeByBudgetSizeTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/addRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void addRequest(string requestPersonName, System.DateTime date, System.DateTime time, int houseID, int realtorID) {
            this.Invoke("addRequest", new object[] {
                        requestPersonName,
                        date,
                        time,
                        houseID,
                        realtorID});
        }
        
        /// <remarks/>
        public void addRequestAsync(string requestPersonName, System.DateTime date, System.DateTime time, int houseID, int realtorID) {
            this.addRequestAsync(requestPersonName, date, time, houseID, realtorID, null);
        }
        
        /// <remarks/>
        public void addRequestAsync(string requestPersonName, System.DateTime date, System.DateTime time, int houseID, int realtorID, object userState) {
            if ((this.addRequestOperationCompleted == null)) {
                this.addRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRequestOperationCompleted);
            }
            this.InvokeAsync("addRequest", new object[] {
                        requestPersonName,
                        date,
                        time,
                        houseID,
                        realtorID}, this.addRequestOperationCompleted, userState);
        }
        
        private void OnaddRequestOperationCompleted(object arg) {
            if ((this.addRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/displayAppointments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet displayAppointments(int Id) {
            object[] results = this.Invoke("displayAppointments", new object[] {
                        Id});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void displayAppointmentsAsync(int Id) {
            this.displayAppointmentsAsync(Id, null);
        }
        
        /// <remarks/>
        public void displayAppointmentsAsync(int Id, object userState) {
            if ((this.displayAppointmentsOperationCompleted == null)) {
                this.displayAppointmentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndisplayAppointmentsOperationCompleted);
            }
            this.InvokeAsync("displayAppointments", new object[] {
                        Id}, this.displayAppointmentsOperationCompleted, userState);
        }
        
        private void OndisplayAppointmentsOperationCompleted(object arg) {
            if ((this.displayAppointmentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.displayAppointmentsCompleted(this, new displayAppointmentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void findMatchingHomesCompletedEventHandler(object sender, findMatchingHomesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findMatchingHomesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findMatchingHomesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void updateHomeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void addHomeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void deleteHomeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void findHomeByCityStateBudgetCompletedEventHandler(object sender, findHomeByCityStateBudgetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findHomeByCityStateBudgetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findHomeByCityStateBudgetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void findHomeByBudgetSizeTypeCompletedEventHandler(object sender, findHomeByBudgetSizeTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findHomeByBudgetSizeTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findHomeByBudgetSizeTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void addRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void displayAppointmentsCompletedEventHandler(object sender, displayAppointmentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class displayAppointmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal displayAppointmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591